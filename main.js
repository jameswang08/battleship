(()=>{"use strict";var e={28:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"html, body{\n    margin: 0;\n    padding: 0;\n}\n\n.container{\n    width: 100vw;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    gap: 32px;\n    position: relative;\n}\n\n.board{\n    height: 80vh;\n    width: auto;\n    flex: 1 1 0;\n    display: flex;\n    flex-direction: column;\n}\n\n.row{\n    display: flex;\n    flex: 1 1 0;\n}\n\n.square{\n    flex: 1 1 0;\n    border: 1px solid black;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: lightblue;\n}\n\n#intro{\n    border: 1px solid black;\n    position: absolute;\n    top: 30%px;\n}\n\n.end{\n    background-color: lightgray;\n    border: 1px solid black;\n    padding: 8px 12px;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,6BAA6B;IAC7B,mBAAmB;IACnB,SAAS;IACT,kBAAkB;AACtB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,WAAW;IACX,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,WAAW;AACf;;AAEA;IACI,WAAW;IACX,uBAAuB;IACvB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,2BAA2B;AAC/B;;AAEA;IACI,uBAAuB;IACvB,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,2BAA2B;IAC3B,uBAAuB;IACvB,iBAAiB;AACrB",sourcesContent:["html, body{\n    margin: 0;\n    padding: 0;\n}\n\n.container{\n    width: 100vw;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    gap: 32px;\n    position: relative;\n}\n\n.board{\n    height: 80vh;\n    width: auto;\n    flex: 1 1 0;\n    display: flex;\n    flex-direction: column;\n}\n\n.row{\n    display: flex;\n    flex: 1 1 0;\n}\n\n.square{\n    flex: 1 1 0;\n    border: 1px solid black;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: lightblue;\n}\n\n#intro{\n    border: 1px solid black;\n    position: absolute;\n    top: 30%px;\n}\n\n.end{\n    background-color: lightgray;\n    border: 1px solid black;\n    padding: 8px 12px;\n}"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],d=o[l]||0,u="".concat(l," ").concat(d);o[l]=d+1;var h=n(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)t[h].references++,t[h].updater(p);else{var f=a(p,r);r.byIndex=s,t.splice(s,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=n(o[i]);t[s].references--}for(var c=r(e,a),l=0;l<o.length;l++){var d=n(o[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}o=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),a=n.n(r),o=n(569),i=n.n(o),s=n(565),c=n.n(s),l=n(216),d=n.n(l),u=n(589),h=n.n(u),p=n(28),f={};f.styleTagTransform=h(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=d(),t()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;const A=class{constructor(e){this.tiles=e,this.hits=0}getID(){return this.tiles}hit(){this.hits+=1}isSunk(){return this.hits===this.tiles}},m=class{constructor(){this.playerBoard=new class{constructor(e=10){this.allSunk=!1,this.size=e,this.ships=[],this.board=[];for(let e=0;e<this.size;e+=1)this.board.push(Array(10).fill("."))}isValid(e,t,n,r){for(let a=0;a<r;a+=1){if(e<0||e>=this.size||t<0||t>=this.size||"."!==this.board[t][e])return!1;switch(n){case 0:t-=1;break;case 1:t+=1;break;case 2:e+=1;break;default:e-=1}}return!0}getRandomInt(e,t){return Math.floor(Math.random()*(t-e))+e}generateCoords(e){let t,n,r;do{t=this.getRandomInt(0,this.size-1),n=this.getRandomInt(0,this.size-1),r=this.getRandomInt(0,3)}while(!this.isValid(t,n,r,e));return[t,n,r]}isDefeated(){return this.allSunk}addShip(e){this.ships.push(e)}placeShips(...e){for(let t=1;t<=e.length;t+=1){this.addShip(new A(t));let n=e[t-1][0],r=e[t-1][1],a=e[t-1][2];this.isValid(n,r,a,t)||([n,r,a]=this.generateCoords(t));for(let e=0;e<t;e+=1)switch(this.board[r][n]=t.toString(),a){case 0:r-=1;break;case 1:r+=1;break;case 2:n+=1;break;default:n-=1}}}checkDefeat(){let e=!0;this.ships.forEach((t=>{t.isSunk()||(e=!1)})),this.allSunk=e}receiveAttack(e,t){if("."===this.board[t][e])return this.board[t][e]="O",0;if("X"!==this.board[t][e]){const n=this.board[t][e]-1;return this.ships[n].hit(),this.board[t][e]="X",this.checkDefeat(),1}return-1}},this.attacked=[];for(let e=0;e<10;e+=1)this.attacked.push(Array(10).fill("."))}randomlyPlace(){const e=[];for(let t=1;t<=5;t+=1)e.push(this.playerBoard.generateCoords(t));this.playerBoard.placeShips(...e)}recordAttack(e,t,n){this.attacked[t][e]=n}cpuAttack(){let e,t;do{e=Math.floor(10*Math.random()),t=Math.floor(10*Math.random())}while("."!==this.attacked[t][e]);return this.recordAttack(e,t,"X"),[t,e]}sunk(){return this.playerBoard.isDefeated()}},b=document.createElement("div");b.classList.add("container"),b.style.width="100vw",b.style.height="100vh";const y=document.createElement("div"),v=document.createElement("div");function g(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function C(e){g(y);for(let t=0;t<10;t+=1){const n=document.createElement("div");n.classList.add("row");for(let r=0;r<10;r+=1){const a=document.createElement("div");a.classList.add("square"),"X"===e[r][t]?a.style.backgroundColor="red":"O"===e[r][t]?a.style.backgroundColor="black":"."!==e[r][t]&&(a.style.backgroundColor="gray"),n.appendChild(a)}y.appendChild(n)}}function k(e,t){g(v);for(let n=0;n<10;n+=1){const r=document.createElement("div");r.classList.add("row");for(let a=0;a<10;a+=1){const o=document.createElement("div");o.classList.add("square"),o.addEventListener("click",(()=>t(n,a))),"X"===e[a][n]?(o.innerText="X",o.style.backgroundColor="red"):"."!==e[a][n]&&(o.innerText="*",o.style.backgroundColor="white"),r.appendChild(o)}v.appendChild(r)}}function x(e){for(;b.firstChild;)b.removeChild(b.firstChild);const t=document.createElement("div");t.classList.add("end"),t.innerText="You "+(e?"win!":"lose!"),b.appendChild(t)}y.classList.add("board"),v.classList.add("board"),b.appendChild(y),b.appendChild(v),document.querySelector("body").appendChild(b);const B=new m,I=new m,w=(e,t)=>{let n,r,a=I.playerBoard.receiveAttack(e,t);-1!==a&&(a=0===a?"O":"X",B.recordAttack(e,t,a),I.sunk()&&x(1),[n,r]=I.cpuAttack(),B.playerBoard.receiveAttack(n,r),B.sunk()&&x(0),C(B.playerBoard.board),k(B.attacked,w))};!function(){const e=document.createElement("p");e.innerText="Rules: You will be playing against a CPU. \n    Your objective is to sink all of their ships before yours are all sunk. \n    The board is a 10 by 10 grid. Both your and the CPU's ships will be randomly placed. \n    You both have 5 ships, one of length 1, one of length 2, one of length 3, one of length 4, and one of length 5. \n    Your board is on the left of the screen while the CPU's board is on the right. \n    To attack a tile, click a tile on the enemy board to the right. \n    A successful attack is indicated by a red tile. A miss is indicated by a white tile for you, and a black tile for the CPU. Your ships are represented by gray tiles. \n    Click anywhere on this text once you are familiar with these rules.",e.id="intro",b.appendChild(e)}(),new Promise((e=>{const t=document.getElementById("intro");t.addEventListener("click",(()=>{t.remove(),e()}))})).then((()=>{B.randomlyPlace(),I.randomlyPlace(),C(B.playerBoard.board),k(B.attacked,w)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,